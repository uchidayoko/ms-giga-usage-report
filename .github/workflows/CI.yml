name: CI
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # リポジトリのチェックアウト
      - uses: actions/checkout@v4

      # Markdownのリントステップ
      - name: Markdownリントの実行
        run: |
          echo "remark-cliモジュールをインストールしています..."
          npm install remark-cli remark-preset-lint-consistent

          echo "Markdownのリントを実行しています..."
          # remarkを実行し、出力をキャプチャ
          OUTPUT=$(npx remark . --use remark-preset-lint-consistent || true)

          # 出力を表示
          echo "$OUTPUT"

          # 出力にエラーが含まれているか確認
          if echo "$OUTPUT" | grep -q "error"; then
              echo "Markdownリントでエラーレベルの問題が見つかりました。ワークフローを失敗させます。"
              exit 1
          else
              echo "Markdownリントでエラーレベルの問題は見つかりませんでした。"
          fi

      # PowerShellのリントステップ
      - name: PowerShellリントの実行
        shell: pwsh
        run: |
          # PSScriptAnalyzerがインストールされているか確認
          Write-Host "PSScriptAnalyzerモジュールがインストールされているか確認しています..."
          if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
              Write-Host "PSScriptAnalyzerがインストールされていません。インストールしています..."
              Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          } else {
              Write-Host "PSScriptAnalyzerは既にインストールされています。"
          }

          # PSScriptAnalyzerモジュールをインポート
          Write-Host "PSScriptAnalyzerモジュールをインポートしています..."
          Import-Module -Name PSScriptAnalyzer -Force

          # すべての.ps1ファイルを検索
          Write-Host ".ps1ファイルを分析するために検索しています..."
          $files = Get-ChildItem -Path . -Recurse -Filter "*.ps1"

          # エラーが発生したかどうかを追跡するフラグを初期化
          $hasErrors = $false

          if ($files.Count -eq 0) {
              Write-Host "ディレクトリに.ps1ファイルが見つかりませんでした。"
          } else {
              Write-Host "$($files.Count)個の.ps1ファイルが見つかりました。分析を開始しています..."
              foreach ($file in $files) {
                  try {
                      Write-Host "ファイルを分析中: $($file.FullName)"
                      Invoke-ScriptAnalyzer -Path $file.FullName -Recurse
                  } catch {
                      Write-Host "ファイルの分析中にエラーが発生しました: $($file.FullName)"
                      Write-Host $_
                      # エラーフラグをtrueに設定
                      $hasErrors = $true
                  }
              }
              Write-Host "分析が完了しました。"
          }

          # エラーが発生した場合、非ゼロステータスで終了
          if ($hasErrors) {
              Write-Host "PowerShellリント中にエラーが検出されました。"
              exit 1
          }

      # YAMLリント
      - name: YAMLリントの実行
        shell: bash
        run: |
          files=$(find ./.github/workflows -name "*.yml" -o -name "*.yaml")
          if [-z "$files"]; then
            echo "YAMLファイルが見つかりませんでした。yamllintをスキップします。"
          else
            echo "$files" | xargs yamllint
          fi
